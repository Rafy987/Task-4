<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>To-Do Web App</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      background: #f4f6fb;
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
    }
    .container {
      max-width: 420px;
      background: #fff;
      margin: 40px auto;
      padding: 30px 25px;
      border-radius: 12px;
      box-shadow: 0 4px 24px rgba(0,0,0,0.10);
    }
    h1 {
      text-align: center;
      color: #333;
      margin-bottom: 20px;
    }
    .input-row {
      display: flex;
      gap: 8px;
      margin-bottom: 18px;
    }
    .input-row input[type="text"], .input-row input[type="datetime-local"] {
      flex: 1;
      padding: 8px;
      border: 1px solid #bbb;
      border-radius: 4px;
      font-size: 15px;
    }
    .input-row button {
      padding: 8px 16px;
      background: #007bff;
      color: #fff;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 15px;
      transition: background 0.2s;
    }
    .input-row button:hover {
      background: #0056b3;
    }
    ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    li {
      background: #f7faff;
      margin-bottom: 10px;
      padding: 10px 8px;
      border-radius: 5px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      transition: background 0.2s;
    }
    li.completed {
      background: #d6f5d6;
      text-decoration: line-through;
      color: #888;
    }
    .task-info {
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    .task-title {
      font-size: 16px;
      margin-bottom: 2px;
    }
    .task-datetime {
      font-size: 12px;
      color: #666;
    }
    .actions button {
      margin-left: 6px;
      background: none;
      border: none;
      color: #007bff;
      cursor: pointer;
      font-size: 15px;
      padding: 2px 6px;
    }
    .actions button:hover {
      color: #d9534f;
    }
    .actions .save-btn {
      color: #28a745;
    }
    .actions .save-btn:hover {
      color: #155724;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>To-Do List</h1>
    <div class="input-row">
      <input type="text" id="taskInput" placeholder="Add a new task...">
      <input type="datetime-local" id="dateInput">
      <button onclick="addTask()">Add</button>
    </div>
    <ul id="taskList"></ul>
  </div>
  <script>
    let tasks = [];

    function renderTasks() {
      const list = document.getElementById('taskList');
      list.innerHTML = '';
      tasks.forEach((task, idx) => {
        const li = document.createElement('li');
        li.className = task.completed ? 'completed' : '';
        // Task info
        const infoDiv = document.createElement('div');
        infoDiv.className = 'task-info';

        if (task.editing) {
          // Edit mode
          infoDiv.innerHTML = `
            <input type="text" id="editTitle${idx}" value="${task.title}" style="margin-bottom:4px;">
            <input type="datetime-local" id="editDate${idx}" value="${task.datetime}">
          `;
        } else {
          infoDiv.innerHTML = `
            <span class="task-title">${task.title}</span>
            <span class="task-datetime">${task.datetime ? new Date(task.datetime).toLocaleString() : ''}</span>
          `;
        }

        li.appendChild(infoDiv);

        // Actions
        const actions = document.createElement('div');
        actions.className = 'actions';

        // Complete/Undo button
        const completeBtn = document.createElement('button');
        completeBtn.innerHTML = task.completed ? 'Undo' : 'âœ”';
        completeBtn.title = task.completed ? 'Mark as incomplete' : 'Mark as complete';
        completeBtn.onclick = () => toggleComplete(idx);
        actions.appendChild(completeBtn);

        // Edit/Save button
        if (task.editing) {
          const saveBtn = document.createElement('button');
          saveBtn.innerHTML = 'Save';
          saveBtn.className = 'save-btn';
          saveBtn.onclick = () => saveEdit(idx);
          actions.appendChild(saveBtn);
        } else {
          const editBtn = document.createElement('button');
          editBtn.innerHTML = 'âœŽ';
          editBtn.title = 'Edit task';
          editBtn.onclick = () => editTask(idx);
          actions.appendChild(editBtn);
        }

        // Delete button
        const deleteBtn = document.createElement('button');
        deleteBtn.innerHTML = 'ðŸ—‘';
        deleteBtn.title = 'Delete task';
        deleteBtn.onclick = () => deleteTask(idx);
        actions.appendChild(deleteBtn);

        li.appendChild(actions);
        list.appendChild(li);
      });
    }

    function addTask() {
      const title = document.getElementById('taskInput').value.trim();
      const datetime = document.getElementById('dateInput').value;
      if (!title) return;
      tasks.push({ title, datetime, completed: false, editing: false });
      document.getElementById('taskInput').value = '';
      document.getElementById('dateInput').value = '';
      renderTasks();
    }

    function toggleComplete(idx) {
      tasks[idx].completed = !tasks[idx].completed;
      renderTasks();
    }

    function editTask(idx) {
      tasks[idx].editing = true;
      renderTasks();
    }

    function saveEdit(idx) {
      const newTitle = document.getElementById(`editTitle${idx}`).value.trim();
      const newDate = document.getElementById(`editDate${idx}`).value;
      if (newTitle) {
        tasks[idx].title = newTitle;
        tasks[idx].datetime = newDate;
        tasks[idx].editing = false;
        renderTasks();
      }
    }

    function deleteTask(idx) {
      tasks.splice(idx, 1);
      renderTasks();
    }

    // Initial render
    renderTasks();
  </script>
</body>
</html>
